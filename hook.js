
(() => {
      // ----- ÂÆâÂÖ®ÂºïÁî®ÔºåÈò≤Ê≠¢ÁΩëÈ°µÊ±°Êüì -----
      const _Reflect_getProto = typeof Reflect !== "undefined" && typeof Reflect.getPrototypeOf === "function"
        ? Reflect.getPrototypeOf
        : (obj) => obj.__proto__;
      const _Object_getOwnNames = Object.getOwnPropertyNames.bind(Object);
      const _Object_getOwnDesc = Object.getOwnPropertyDescriptor.bind(Object);
      const _Object_defineProp = Object.defineProperty.bind(Object);
      const _Console_log = console.log.bind(console);
      const _Console_error = console.error.bind(console);
      const _Date_nowISO = () => new Date().toISOString();

      // Êó•ÂøóÂÆπÂô®
      const _globalLogs = [];
      window._hookLogs = _globalLogs;
      window.dumpHookLogs = () => console.log(JSON.stringify(_globalLogs, null, 2));

      // Ëøô‰∫õÂÖ®Â±ÄÂêçÂ≠óÂçÉ‰∏áÂà´ÂéªÊõøÊç¢ÔºàÈªëÂêçÂçïÔºâ
      const GLOBAL_NAMES_TO_SKIP = new Set([
        "Object", "Function", "Array", "Date", "RegExp", "Promise", "Map", "Set", "WeakMap", "WeakSet",
        "Reflect", "JSON", "Math", "Intl", "console", "window", "document", "globalThis",
        "Error", "TypeError"
      ]);

      function isLikelyGlobalConstructor(val) {
        if (typeof val !== "function") return false;
        // Â∏∏ËßÅÂÜÖÂª∫ÊûÑÈÄ†Âô®ÈÉΩÊúâ prototypeÔºàÂ§ßÂ§öÈÉΩÔºâÔºå‰∏î prototype.constructor ÊåáÂêëËá™Â∑±
        try {
          const proto = _Reflect_getProto(val.prototype || {});
          return !!(val.prototype && val.prototype.constructor === val && proto !== null);
        } catch {
          return false;
        }
      }

      function isNative(fn) {
        return (/\{\s*\[native code\]\s*\}/).test(String(fn));
      }

      function hookObject(objName, options = {}) {
        const cfg = Object.assign({ deep: true, includeOwn: true, filter: null }, options);

        try {
          const target = eval(objName);
          if (!target) {
            _Console_log(`[Hook] ‚ùå ${objName} is undefined`);
            return;
          }

          const logs = _globalLogs;
          const visited = new WeakSet();

          function hookLevel(obj, level = 0) {
            if (!obj || visited.has(obj)) return;
            visited.add(obj);

            // Â¶ÇÊûúÂΩìÂâçÂØπË±°ÊòØ plain {}ÔºàÂç≥ constructor.name === 'Object' ‰∏îÂéüÂûãÊ≠£ÊòØ Object.prototypeÔºâÔºå
            // ËØ¥ÊòéÂ∑≤ÁªèÂà∞ËææÊôÆÈÄöÂØπË±°Â±ÇÔºåÁªßÁª≠ÈÄíÂΩíÂèØËÉΩ‰ºöÂΩ±ÂìçÂÖ®Â±ÄÂëΩÂêçÁ©∫Èó¥ -> ÂèØËßÜÈúÄË¶ÅË∑≥Ëøá
            try {
              if (obj.constructor?.name === "Object" && _Reflect_getProto(obj) === Object.prototype) {
                // ‰∏çËá™Âä®ËøîÂõû ‚Äî‚Äî Êüê‰∫õÂú∫ÊôØ‰Ω†‰ªçÊÉ≥ hook plain objectÔºåÂèØÊîπËøôÈáåÁ≠ñÁï•
                // return;
              }
            } catch (e) { /* ignore */ }

            const proto = _Reflect_getProto(obj);
            const names = new Set();

            if (cfg.includeOwn) {
              try { _Object_getOwnNames(obj).forEach(n => names.add(n)); } catch {}
            }
            if (proto) {
              try { _Object_getOwnNames(proto).forEach(n => names.add(n)); } catch {}
            }

            for (const key of names) {
                // _Console_log(`${objName}.${key}`);
              // Ë∑≥Ëøá constructor
              if (key === "constructor") continue;

              // Ë∑≥ËøáÊòæÂºèÈªëÂêçÂçïÔºàÊØîÂ¶Ç window.ObjectÔºâ
              if (GLOBAL_NAMES_TO_SKIP.has(key)) continue;

              // Ëøõ‰∏ÄÊ≠•ËøáÊª§ÔºöÂ¶ÇÊûú key ÊòØÂÖ®Â±ÄÂëΩÂêçÁ©∫Èó¥‰∏ãÁöÑÊûÑÈÄ†Âô®Ôºà‰æãÂ¶Ç window.ObjectÔºâÔºåË∑≥Ëøá
              let desc;
              try {
                desc = _Object_getOwnDesc(obj, key) || _Object_getOwnDesc(proto || {}, key);
              } catch {
                continue;
              }
              if (!desc) continue;

              // Ëé∑ÂèñÂéüÂßãÂÄºÔºàÊ≥®ÊÑèËÆøÈóÆÂèØËÉΩÊäõÈîôÔºâ
              let val;
              try { val = obj[key]; } catch { continue; }

              // ÂÖÅËÆ∏Áî®Êà∑ÈÄöËøá filter ÊéßÂà∂Ë¶Å‰∏çË¶Å hookÔºàÊîØÊåÅ RegExp„ÄÅÂáΩÊï∞Êàñ nullÔºâ
              if (cfg.filter) {
                if (cfg.filter instanceof RegExp) {
                  if (!cfg.filter.test(key)) continue;
                } else if (typeof cfg.filter === "function") {
                  try { if (!cfg.filter({ obj, key, val, desc, objName })) continue; } catch { continue; }
                }
              }

              // Â¶ÇÊûúËøôÊòØ‰∏Ä‰∏™ÂÖ®Â±ÄÊûÑÈÄ†ÂáΩÊï∞ÔºàObject / Function / Array / ...ÔºâÔºå‰∏çË¶ÅÊõøÊç¢ÂÆÉ
              if (isLikelyGlobalConstructor(val) || (typeof val === "function" && val === window[key])) {
                // Ë∑≥ËøáÊõøÊç¢ÊûÑÈÄ†Âô®Êú¨Ë∫´
                continue;
              }

              // Hook ÊñπÊ≥ï
              if (typeof val === "function") {
                // _Console_log(`${objName}.${key} is a function`);
                try {
                  const original = val;
                  // ‰øùÂ≠òÂéüÂáΩÊï∞Âà∞Êó•ÂøóÈáåÔºàÂèØÈÄâÔºâ
                  // Áî® defineProperty Ë¶ÜÁõñÊó∂ÔºåÁ°Æ‰øù‰∏çÁ†¥Âùè descriptor ÁöÑ writable/enumerable Á≠â
                  _Object_defineProp(obj, key, {
                    value: function (...args) {
                      try {
                        const result = original.apply(this, args);
                        const msg = `[Hook] ${objName}.${key}(${args.map(a => {
                          try { return JSON.stringify(a); } catch { return String(a); }
                        }).join(", ")}) -> ${String(result)}`;
                        logs.push({ time: _Date_nowISO(), obj: objName, key, msg });
                        _Console_log(msg);
                        return result;
                      } catch (err) {
                        _Console_error(`[Hook][Error] ${objName}.${key}:`, err);
                        throw err;
                      }
                    },
                    configurable: true,
                    enumerable: desc.enumerable === true,
                    writable: desc.writable !== false
                  });

                  // ‰º™Ë£ÖÊñπÊ≥ïÂêçÁß∞
                  // _Object_defineProp(eval(`${objName}.${key}`), 'name', { value: key });
                  _Object_defineProp(obj[key], 'name', { value: key });

                  // todo: ‰º™Ë£Ö toString() ‰ª•Âèä toString.toString() ‰ª•Âèä prototype
                  // document.createElement.toString()
                  // function createElement() { [native code] }
                  // document.createElement.toString.toString()
                  // function toString() { [native code] }
                  const _isNative = isNative(val);
                  // _Console_log(`${objName}.${key} _isNative: ${_isNative}`);
                  if (_isNative) {
                    _Object_defineProp(obj[key], 'toString', {
                      value: function() {
                        return `function ${key || ''}() { [native code] }`;
                      },
                      writable: false,
                      configurable: false
                    });
                    _Object_defineProp(obj[key].toString, 'toString', {
                      value: function() {
                        return 'function toString() { [native code] }';
                      },
                      writable: false,
                      configurable: false
                    });
                    _Object_defineProp(obj[key], 'prototype', {
                      value: undefined,
                      writable: false,
                      configurable: false
                    });
                  }


                } catch (e) {
                  // Êó†ÊùÉ‰øÆÊîπÔºàÊØîÂ¶ÇËÆ∏Â§öÂÜÖÂª∫Â±ûÊÄß‰∏çÂèØÈÖçÁΩÆÔºâÔºåÁõ¥Êé•Ë∑≥Ëøá
                  continue;
                }
              } else {
                // _Console_log(`${objName}.${key} is a attribute, desc: ${desc}`);
                // Hook Â±ûÊÄßËÆøÈóÆÂô®ÊàñÂ∏∏ÈáèÔºàÂ∞ΩÈáè‰∏çÂéªÂä®‰∏çÂèØÈÖçÁΩÆÁöÑÂ±ûÊÄßÔºâ
                try {
                  // Â¶ÇÊûúÂéüÂßã descriptor Ê†áÊòé‰∏çÂèØÈÖçÁΩÆÔºåË∑≥Ëøá‰ª•ÈÅøÂÖçÊäõÂá∫
                  if (!desc.configurable) continue;

                  _Object_defineProp(obj, key, {
                    get() {
                      const value = desc.get ? desc.get.call(this) : desc.value;
                      const msg = `[Hook][get] ${objName}.${key} -> ${String(value)}`;
                      logs.push({ time: _Date_nowISO(), obj: objName, key, msg });
                      _Console_log(msg);
                      return value;
                    },
                    set(v) {
                      const msg = `[Hook][set] ${objName}.${key} = ${String(v)}`;
                      logs.push({ time: _Date_nowISO(), obj: objName, key, msg });
                      _Console_log(msg);
                      if (desc.set) desc.set.call(this, v);
                    },
                    configurable: true,
                    enumerable: desc.enumerable === true
                  });
                } catch (e) {
                  // _Console_error(`[Hook] ‚ùå Failed to hook ${objName}.${key}:`, e);
                  continue;
                }
              }
            } // for names

            // ÈÄíÂΩíÂéüÂûãÈìæ
            if (cfg.deep) {
              try {
                const p = _Reflect_getProto(obj);
                if (p && p !== Object.prototype) hookLevel(p, level + 1);
              } catch { /* ignore */ }
            }
          } // hookLevel

          hookLevel(target);
          _Console_log(`[Hook] ‚úÖ ${objName} hooked (deep=${cfg.deep}, includeOwn=${cfg.includeOwn})`);
        } catch (err) {
          _Console_error(`[Hook] ‚ùå Failed to hook ${objName}:`, err);
        }
      }

      window.hookObject = hookObject;
      _Console_log("[Hook] üß© Safe hookObject ready - will NOT replace global constructors");
    })();




    
    hookObject("window");
    hookObject("performance");
    hookObject("document");
    hookObject("location");
    hookObject("navigator");
    hookObject("screen");
    hookObject("history");
    hookObject("localStorage");
    hookObject("sessionStorage");



    